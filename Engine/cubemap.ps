cbuffer LightBuffer
{
	float3 alc;
	float ali;
	float3 dlc;
	float dli;
	float3 slc;
	float sli;
    float4 lightPosition;
	float4 eyePos;
};


struct PixelInputType
{
    float4 position : SV_POSITION;
    float3 texCoord : TEXCOORD0;
	float3 normal : NORMAL;
	float4 worldPos : WPOS;
};

TextureCube cubeMapTexture;
SamplerState Sampler;


static const float SpecularPower = 64.f;


float4 calcAmbient(in float3 alc, in float ali)
{
	return saturate(float4(alc, 1.0f) * ali);
}


float4 calcDiffuse(in float3 invLightDir, in float3 normal, in float3 dlc, in float dli, inout float dFactor)
{	
	dFactor = max(dot(normal, invLightDir), 0.0f);
	return saturate(float4(dlc, 1.0f) * dli * dFactor);
}


float4 calcSpecular(in float3 invLightDir, in float3 normal, in float3 slc, in float sli, in float3 invViewDir, in float dFactor)
{
	float3 reflection = normalize(reflect(invLightDir, normal));
	float sFactor = pow(saturate(dot(reflection, invViewDir)), SpecularPower);
	return saturate(float4(slc, 1.0f) * sFactor * sli * dFactor);	// sli
}



static const float iceRefractionIndex = 1.309;

float4 CMFS(PixelInputType input) : SV_TARGET
{
	input.normal = normalize(input.normal);

	float3 lightDir = normalize(input.worldPos.xyz - lightPosition.xyz);
	float3 invLightDir = -lightDir;
	float3 viewDir = normalize(input.worldPos.xyz - eyePos.xyz);	

	float3 incident = viewDir;
	float3 reflected = reflect(incident, input.normal);

	float4 colour = cubeMapTexture.Sample(Sampler, reflected);

	//float3 refracted = refract(incident, input.normal, iceRefractionIndex);
	//float4 refrColour = cubeMapTexture.Sample(Sampler, refracted);
	//colour = lerp(colour, refrColour, .5f);

	float4 ambient = calcAmbient(alc, ali);
	float dFactor = 0.f;
	float4 diffuse = calcDiffuse(invLightDir, input.normal, dlc, dli, dFactor);
	float4 specular = calcSpecular(invLightDir, input.normal, slc, sli, viewDir, dFactor);
	colour = (ambient + diffuse) * colour + specular;

	colour.rgb = pow( colour.xyz, float3(0.333, 0.333, 0.333));

    return colour;
}